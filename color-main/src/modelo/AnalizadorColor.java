// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/modelo/AnalizadorColor.flex

package modelo;
import compilerTools.TextColor;
import java.awt.Color;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class AnalizadorColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\1\2\1\0\1\3\22\0\1\4\7\0"+
    "\2\5\3\0\1\6\1\0\1\7\1\0\1\10\5\11"+
    "\5\0\1\12\1\13\1\14\4\0\1\15\1\16\1\17"+
    "\11\0\1\20\1\21\3\0\1\22\4\0\1\23\1\0"+
    "\1\5\1\0\1\5\1\0\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\5\1\0\1\5\7\0\1\2\u01a2\0\2\2\326\0"+
    "\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\0\1\1\2\2\1\3\31\1\122\0"+
    "\1\4\5\0\1\5\44\0\1\6\102\0\1\7\22\0"+
    "\1\10\30\0\1\11\17\0\1\12\1\0\1\12\64\0"+
    "\1\13\10\0\1\14\34\0\1\15\26\0\1\16\14\0"+
    "\1\17\6\0\1\20\4\0\1\20\14\0\1\13\21\0"+
    "\1\20\6\0\1\21\6\0\1\10\5\0\1\20\4\0"+
    "\1\22\7\0\1\23\21\0\1\24\7\0\1\25\15\0"+
    "\1\26\117\0\1\27\2\0\1\30\1\7\3\0\1\31"+
    "\4\0\1\32\45\0\1\10\4\0\1\33\34\0\1\25"+
    "\30\0\1\34\11\0\1\35\24\0\1\36\2\0\1\25"+
    "\40\0\1\37\4\0\1\40\20\0\1\41\22\0\1\42"+
    "\20\0\1\43\4\0\1\44\2\0\1\45\17\0\1\46"+
    "\17\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[884];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\57\0\215\0\57\0\274"+
    "\0\353\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\353\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\57\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee"+
    "\0\57\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637"+
    "\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af"+
    "\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\57\0\u1bb9\0\u1be8"+
    "\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8"+
    "\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340"+
    "\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779\0\u27a8"+
    "\0\57\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1"+
    "\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69"+
    "\0\u2a98\0\u2ac7\0\u2af6\0\57\0\u2b25\0\u2b54\0\u2b83\0\u2bb2"+
    "\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a"+
    "\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2"+
    "\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\57\0\u2f8d\0\u2fbc\0\u2feb"+
    "\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163"+
    "\0\u3192\0\u31c1\0\u31f0\0\u321f\0\57\0\u324e\0\u327d\0\u32ac"+
    "\0\u32db\0\u330a\0\u3339\0\u3368\0\u3397\0\u33c6\0\u33f5\0\u3424"+
    "\0\u3453\0\u3482\0\u34b1\0\u34e0\0\u350f\0\u353e\0\u356d\0\u359c"+
    "\0\u35cb\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714"+
    "\0\u3743\0\u3772\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c"+
    "\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5\0\u3a04"+
    "\0\u3a33\0\u3a62\0\u3a91\0\u3ac0\0\u3aef\0\u3b1e\0\u3b4d\0\u3b7c"+
    "\0\u3bab\0\u3bda\0\u3c09\0\57\0\u3c38\0\u3c67\0\u3c96\0\u3cc5"+
    "\0\u3cf4\0\u3d23\0\u3d52\0\u3d81\0\57\0\u3db0\0\u3ddf\0\u3e0e"+
    "\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28\0\u3f57\0\u3f86"+
    "\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf\0\u40fe"+
    "\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9\0\u4218\0\u4247\0\u4276"+
    "\0\u42a5\0\57\0\u42d4\0\u4303\0\u4332\0\u4361\0\u4390\0\u43bf"+
    "\0\u43ee\0\u441d\0\u444c\0\u447b\0\u44aa\0\u44d9\0\u4508\0\u4537"+
    "\0\u4566\0\u4595\0\u45c4\0\u45f3\0\u4622\0\u4651\0\u4680\0\u46af"+
    "\0\57\0\u46de\0\u470d\0\u473c\0\u476b\0\u479a\0\u47c9\0\u47f8"+
    "\0\u4827\0\u4856\0\u4885\0\u48b4\0\u48e3\0\57\0\u4912\0\u4941"+
    "\0\u4970\0\u499f\0\u49ce\0\u49fd\0\u4a2c\0\u4a5b\0\u4a8a\0\u4ab9"+
    "\0\u4ae8\0\57\0\u4b17\0\u4b46\0\u4b75\0\u4ba4\0\u4bd3\0\u4c02"+
    "\0\u4c31\0\u4c60\0\u4c8f\0\u4cbe\0\u4ced\0\u4d1c\0\u4d4b\0\u4d7a"+
    "\0\u4da9\0\u4dd8\0\u4e07\0\u4e36\0\u4e65\0\u4e94\0\u4ec3\0\u4ef2"+
    "\0\u4f21\0\u4f50\0\u4f7f\0\u4fae\0\u4fdd\0\u500c\0\u503b\0\u506a"+
    "\0\u5099\0\u50c8\0\u50f7\0\u5126\0\u5155\0\u5184\0\u51b3\0\57"+
    "\0\u51e2\0\u5211\0\u5240\0\u526f\0\u529e\0\u52cd\0\u52fc\0\u532b"+
    "\0\u535a\0\u5389\0\u53b8\0\u53e7\0\u5416\0\u5445\0\u5474\0\u54a3"+
    "\0\u54d2\0\57\0\u5501\0\u5530\0\u555f\0\u558e\0\u55bd\0\u55ec"+
    "\0\u561b\0\57\0\u564a\0\u5679\0\u56a8\0\u56d7\0\u5706\0\u5735"+
    "\0\u5764\0\u5793\0\u57c2\0\u57f1\0\u5820\0\u584f\0\u587e\0\u58ad"+
    "\0\u58dc\0\u590b\0\u593a\0\57\0\u5969\0\u5998\0\u59c7\0\u59f6"+
    "\0\u5a25\0\u5a54\0\u5a83\0\u5ab2\0\u5ae1\0\u5b10\0\u5b3f\0\u5b6e"+
    "\0\u5b9d\0\u5bcc\0\u5bfb\0\u5c2a\0\u5c59\0\u5c88\0\u5cb7\0\u5ce6"+
    "\0\u5d15\0\57\0\u5d44\0\u5d73\0\u5da2\0\u5dd1\0\u5e00\0\u5e2f"+
    "\0\u5e5e\0\u5e8d\0\u5ebc\0\u5eeb\0\u5f1a\0\u5f49\0\u5f78\0\u5fa7"+
    "\0\u5fd6\0\u6005\0\u6034\0\u6063\0\u6092\0\u60c1\0\u60f0\0\u611f"+
    "\0\u614e\0\u617d\0\u61ac\0\u61db\0\u620a\0\u6239\0\u6268\0\u6297"+
    "\0\u62c6\0\u62f5\0\u6324\0\u6353\0\u6382\0\u63b1\0\u63e0\0\u640f"+
    "\0\u643e\0\u646d\0\u649c\0\u64cb\0\u64fa\0\u6529\0\u6558\0\u6587"+
    "\0\u65b6\0\u65e5\0\u6614\0\u6643\0\u6672\0\u66a1\0\u66d0\0\u66ff"+
    "\0\u672e\0\u675d\0\u678c\0\u67bb\0\u67ea\0\u6819\0\u6848\0\u6877"+
    "\0\u68a6\0\u68d5\0\u6904\0\u6933\0\u6962\0\u6991\0\u69c0\0\u69ef"+
    "\0\u6a1e\0\u6a4d\0\u6a7c\0\u6aab\0\u6ada\0\u6b09\0\u6b38\0\u6b67"+
    "\0\u6b96\0\57\0\u6bc5\0\u6bf4\0\57\0\u6c23\0\u6c52\0\u6c81"+
    "\0\u6cb0\0\57\0\u6cdf\0\u6d0e\0\u6d3d\0\u6d6c\0\57\0\u6d9b"+
    "\0\u6dca\0\u6df9\0\u6e28\0\u6e57\0\u6e86\0\u6eb5\0\u6ee4\0\u6f13"+
    "\0\u6f42\0\u6f71\0\u6fa0\0\u6fcf\0\u6ffe\0\u702d\0\u705c\0\u708b"+
    "\0\u70ba\0\u70e9\0\u7118\0\u7147\0\u7176\0\u71a5\0\u71d4\0\u7203"+
    "\0\u7232\0\u7261\0\u7290\0\u72bf\0\u72ee\0\u731d\0\u734c\0\u737b"+
    "\0\u73aa\0\u73d9\0\u7408\0\u7437\0\u7466\0\u7495\0\u74c4\0\u74f3"+
    "\0\u7522\0\57\0\u7551\0\u7580\0\u75af\0\u75de\0\u760d\0\u763c"+
    "\0\u766b\0\u769a\0\u76c9\0\u76f8\0\u7727\0\u7756\0\u7785\0\u77b4"+
    "\0\u77e3\0\u7812\0\u7841\0\u7870\0\u789f\0\u78ce\0\u78fd\0\u792c"+
    "\0\u795b\0\u798a\0\u79b9\0\u79e8\0\u7a17\0\u7a46\0\57\0\u7a75"+
    "\0\u7aa4\0\u7ad3\0\u7b02\0\u7b31\0\u7b60\0\u7b8f\0\u7bbe\0\u7bed"+
    "\0\u7c1c\0\u7c4b\0\u7c7a\0\u7ca9\0\u7cd8\0\u7d07\0\u7d36\0\u7d65"+
    "\0\u7d94\0\u7dc3\0\u7df2\0\u7e21\0\u7e50\0\u7e7f\0\u7eae\0\57"+
    "\0\u7edd\0\u7f0c\0\u7f3b\0\u7f6a\0\u7f99\0\u7fc8\0\u7ff7\0\u8026"+
    "\0\u8055\0\57\0\u8084\0\u80b3\0\u80e2\0\u8111\0\u8140\0\u816f"+
    "\0\u819e\0\u81cd\0\u81fc\0\u822b\0\u825a\0\u8289\0\u82b8\0\u82e7"+
    "\0\u8316\0\u8345\0\u8374\0\u83a3\0\u83d2\0\u8401\0\57\0\u8430"+
    "\0\u845f\0\u848e\0\u84bd\0\u84ec\0\u851b\0\u854a\0\u8579\0\u85a8"+
    "\0\u85d7\0\u8606\0\u8635\0\u8664\0\u8693\0\u86c2\0\u86f1\0\u8720"+
    "\0\u874f\0\u877e\0\u87ad\0\u87dc\0\u880b\0\u883a\0\u8869\0\u8898"+
    "\0\u88c7\0\u88f6\0\u8925\0\u8954\0\u8983\0\u89b2\0\u89e1\0\u8a10"+
    "\0\u8a3f\0\u8a6e\0\57\0\u8a9d\0\u8acc\0\u8afb\0\u8b2a\0\57"+
    "\0\u8b59\0\u8b88\0\u8bb7\0\u8be6\0\u8c15\0\u8c44\0\u8c73\0\u8ca2"+
    "\0\u8cd1\0\u8d00\0\u8d2f\0\u8d5e\0\u8d8d\0\u8dbc\0\u8deb\0\u8e1a"+
    "\0\57\0\u8e49\0\u8e78\0\u8ea7\0\u8ed6\0\u8f05\0\u8f34\0\u8f63"+
    "\0\u8f92\0\u8fc1\0\u8ff0\0\u901f\0\u904e\0\u907d\0\u90ac\0\u90db"+
    "\0\u910a\0\u9139\0\u9168\0\57\0\u9197\0\u91c6\0\u91f5\0\u9224"+
    "\0\u9253\0\u9282\0\u92b1\0\u92e0\0\u930f\0\u933e\0\u936d\0\u939c"+
    "\0\u93cb\0\u93fa\0\u9429\0\u9458\0\57\0\u9487\0\u94b6\0\u94e5"+
    "\0\u9514\0\57\0\u9543\0\u9572\0\57\0\u95a1\0\u95d0\0\u95ff"+
    "\0\u962e\0\u965d\0\u968c\0\u96bb\0\u96ea\0\u9719\0\u9748\0\u9777"+
    "\0\u97a6\0\u97d5\0\u9804\0\u9833\0\57\0\u9862\0\u9891\0\u98c0"+
    "\0\u98ef\0\u991e\0\u994d\0\u997c\0\u99ab\0\u99da\0\u9a09\0\u9a38"+
    "\0\u9a67\0\u9a96\0\u9ac5\0\u9af4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[884];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\2\1\5\1\2\1\5\2\2"+
    "\1\6\1\7\1\5\1\2\1\10\1\2\1\11\4\2"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\2\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\2\20\3\1\41\37\3\1\2\16\3\1\41\45\3"+
    "\1\42\10\3\1\41\4\3\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\3\1\51\1\52\1\3\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\3\1\62\1\63"+
    "\1\64\1\65\1\66\77\3\1\67\2\3\1\41\56\3"+
    "\1\41\5\3\1\70\1\71\10\3\1\72\3\3\1\73"+
    "\1\3\1\74\1\75\1\3\1\76\25\3\1\41\4\3"+
    "\1\77\5\3\1\100\1\3\1\101\2\3\1\102\2\3"+
    "\1\103\5\3\1\104\25\3\1\41\4\3\1\105\3\3"+
    "\1\106\2\3\1\107\3\3\1\110\2\3\1\111\33\3"+
    "\1\41\4\3\1\112\3\3\1\113\3\3\1\114\5\3"+
    "\1\115\33\3\1\41\20\3\1\116\1\117\11\3\1\120"+
    "\22\3\1\41\4\3\1\121\7\3\1\122\5\3\1\123"+
    "\2\3\1\124\30\3\1\41\10\3\1\125\11\3\1\126"+
    "\33\3\1\41\10\3\1\127\1\3\1\130\1\3\1\131"+
    "\10\3\1\132\1\133\1\134\26\3\1\41\7\3\1\135"+
    "\1\3\1\136\6\3\1\137\1\140\4\3\1\141\27\3"+
    "\1\41\10\3\1\142\3\3\1\143\41\3\1\41\4\3"+
    "\1\144\3\3\1\145\3\3\1\146\5\3\1\147\33\3"+
    "\1\41\4\3\1\150\3\3\1\151\3\3\1\152\5\3"+
    "\1\153\5\3\1\154\25\3\1\41\4\3\1\155\15\3"+
    "\1\156\5\3\1\157\25\3\1\41\5\3\1\160\11\3"+
    "\1\161\3\3\1\162\16\3\1\163\13\3\1\41\4\3"+
    "\1\164\7\3\1\165\2\3\1\166\2\3\1\167\2\3"+
    "\1\170\14\3\1\171\13\3\1\41\56\3\1\41\4\3"+
    "\1\172\3\3\1\173\11\3\1\174\33\3\1\41\6\3"+
    "\1\175\1\3\1\176\3\3\1\177\5\3\1\200\1\201"+
    "\1\3\1\202\1\3\1\203\1\204\25\3\1\41\4\3"+
    "\1\205\3\3\1\206\2\3\1\207\1\210\10\3\1\211"+
    "\6\3\1\212\21\3\1\41\21\3\1\213\3\3\1\214"+
    "\30\3\1\41\4\3\1\215\7\3\1\216\2\3\1\217"+
    "\6\3\1\133\27\3\1\41\10\3\1\220\3\3\1\221"+
    "\41\3\1\41\20\3\1\222\35\3\1\41\4\3\1\223"+
    "\1\224\1\225\1\226\1\227\1\50\1\3\1\51\1\230"+
    "\2\3\1\54\1\231\1\56\1\57\1\60\1\61\1\3"+
    "\1\232\1\233\1\234\1\235\20\3\1\236\3\3\1\41"+
    "\5\3\1\66\1\3\1\237\15\3\1\240\1\241\1\3"+
    "\1\242\21\3\1\171\3\3\1\41\17\3\1\243\5\3"+
    "\1\61\2\3\1\244\25\3\1\41\4\3\1\245\7\3"+
    "\1\246\5\3\1\247\33\3\1\41\4\3\1\250\2\3"+
    "\1\251\1\252\1\253\2\3\1\254\2\3\1\251\7\3"+
    "\1\251\26\3\1\41\20\3\1\255\35\3\1\41\14\3"+
    "\1\256\5\3\1\257\23\3\2\260\6\3\1\41\10\3"+
    "\1\261\14\3\1\251\24\3\1\171\3\3\1\41\11\3"+
    "\1\262\6\3\1\263\1\264\34\3\1\41\5\3\1\265"+
    "\50\3\1\41\4\3\1\266\3\3\1\267\3\3\1\251"+
    "\41\3\1\41\4\3\1\270\3\3\1\271\45\3\1\41"+
    "\4\3\1\272\51\3\1\41\5\3\1\273\11\3\1\251"+
    "\3\3\1\274\26\3\1\163\3\3\1\41\4\3\1\275"+
    "\7\3\1\276\10\3\1\277\24\3\1\171\3\3\1\41"+
    "\52\3\1\171\3\3\1\41\4\3\1\300\3\3\1\301"+
    "\7\3\1\302\1\3\1\303\1\304\3\3\1\305\1\306"+
    "\25\3\1\41\4\3\1\307\1\310\1\3\1\311\1\3"+
    "\1\312\1\3\1\313\1\314\10\3\1\315\24\3\1\171"+
    "\3\3\1\41\17\3\1\251\36\3\1\41\4\3\1\316"+
    "\7\3\1\317\41\3\1\41\5\3\1\316\50\3\1\41"+
    "\1\3\1\320\54\3\1\41\5\3\1\321\50\3\1\41"+
    "\6\3\1\322\16\3\1\323\1\3\1\324\26\3\1\41"+
    "\10\3\1\325\3\3\1\326\2\3\1\327\7\3\1\330"+
    "\26\3\1\41\23\3\1\331\32\3\1\41\27\3\1\332"+
    "\26\3\1\41\34\3\1\333\21\3\1\41\7\3\1\334"+
    "\17\3\1\335\26\3\1\41\26\3\1\336\27\3\1\41"+
    "\6\3\1\337\17\3\1\340\27\3\1\41\12\3\1\341"+
    "\43\3\1\41\14\3\1\342\5\3\1\343\33\3\1\41"+
    "\7\3\1\344\15\3\1\345\30\3\1\41\27\3\1\346"+
    "\26\3\1\41\6\3\1\347\47\3\1\41\17\3\1\350"+
    "\1\3\1\351\34\3\1\41\4\3\1\352\3\3\1\353"+
    "\45\3\1\41\4\3\1\354\51\3\1\41\17\3\1\355"+
    "\1\3\1\356\34\3\1\41\27\3\1\357\26\3\1\41"+
    "\11\3\1\360\14\3\1\361\1\362\26\3\1\41\4\3"+
    "\1\363\20\3\1\364\1\365\2\3\1\161\24\3\1\41"+
    "\32\3\1\366\23\3\1\41\4\3\1\367\1\370\50\3"+
    "\1\41\6\3\1\371\47\3\1\41\23\3\1\372\32\3"+
    "\1\41\17\3\1\373\36\3\1\41\10\3\1\374\6\3"+
    "\1\375\36\3\1\41\17\3\1\376\1\3\1\377\3\3"+
    "\1\u0100\30\3\1\41\4\3\1\u0101\15\3\1\u0102\33\3"+
    "\1\41\21\3\1\u0103\34\3\1\41\22\3\1\u0104\33\3"+
    "\1\41\4\3\1\u0105\7\3\1\u0106\41\3\1\41\25\3"+
    "\1\u0107\30\3\1\41\7\3\1\u0108\2\3\1\u0109\43\3"+
    "\1\41\10\3\1\u010a\45\3\1\41\23\3\1\u010b\32\3"+
    "\1\41\20\3\1\u010c\30\3\1\u010d\4\3\1\41\56\3"+
    "\1\41\25\3\1\u010e\30\3\1\41\4\3\1\u010f\5\3"+
    "\1\u0110\10\3\1\u0111\32\3\1\41\7\3\1\u0112\13\3"+
    "\1\u0113\32\3\1\41\14\3\1\u0114\41\3\1\41\34\3"+
    "\1\u0115\21\3\1\41\21\3\1\u0116\34\3\1\41\5\3"+
    "\1\u0117\13\3\1\u0118\34\3\1\41\12\3\1\u0119\43\3"+
    "\1\41\21\3\1\u011a\4\3\1\u011b\27\3\1\41\22\3"+
    "\1\u011c\7\3\1\u011d\23\3\1\41\25\3\1\u011e\5\3"+
    "\1\u011f\22\3\1\41\7\3\1\u0120\11\3\1\u0121\5\3"+
    "\1\u0122\26\3\1\41\21\3\1\u011f\34\3\1\41\21\3"+
    "\1\u0123\34\3\1\41\17\3\1\u0124\7\3\1\u0125\26\3"+
    "\1\41\20\3\1\u0126\35\3\1\41\4\3\1\u0127\1\u0128"+
    "\2\3\1\u0129\1\u012a\2\3\1\u012b\3\3\1\u012c\1\u012d"+
    "\1\u012e\3\3\1\u012f\2\3\1\u0130\1\u0131\23\3\1\41"+
    "\20\3\1\u0132\35\3\1\41\15\3\1\u0133\24\3\1\163"+
    "\13\3\1\41\56\3\1\41\27\3\1\u0134\26\3\1\41"+
    "\25\3\1\u0135\1\u0136\27\3\1\41\6\3\1\u0137\47\3"+
    "\1\41\4\3\1\u0138\51\3\1\41\26\3\1\u0139\27\3"+
    "\1\41\4\3\1\u013a\3\3\1\u013b\45\3\1\41\7\3"+
    "\1\u013c\11\3\1\u010f\34\3\1\41\4\3\1\u013d\4\3"+
    "\1\u013e\5\3\1\u013f\4\3\1\u0140\1\3\1\u0141\2\3"+
    "\1\u0142\24\3\1\41\5\3\1\u0143\24\3\1\u0144\23\3"+
    "\1\41\22\3\1\u0145\2\3\1\u0146\30\3\1\41\4\3"+
    "\1\u0147\12\3\1\u0148\36\3\1\41\35\3\1\u0149\20\3"+
    "\1\41\30\3\1\u014a\25\3\1\41\4\3\1\u014b\51\3"+
    "\1\41\6\3\1\u014c\47\3\1\41\4\3\1\u014d\3\3"+
    "\1\u014e\14\3\1\u014f\6\3\1\u0150\21\3\1\41\5\3"+
    "\1\u0151\12\3\1\u0152\35\3\1\41\25\3\1\u0153\30\3"+
    "\1\41\17\3\1\u0154\13\3\1\u0155\22\3\1\41\10\3"+
    "\1\u0156\45\3\1\41\20\3\1\375\6\3\1\u0157\26\3"+
    "\1\41\4\3\1\u0158\23\3\1\u0159\25\3\1\41\23\3"+
    "\1\u015a\32\3\1\41\4\3\1\u015b\51\3\1\41\17\3"+
    "\1\u0154\36\3\1\41\17\3\1\u015c\5\3\1\u015d\30\3"+
    "\1\41\7\3\1\u015e\1\u015f\45\3\1\41\14\3\1\u0160"+
    "\41\3\1\41\10\3\1\u0161\45\3\1\41\7\3\1\u0162"+
    "\46\3\1\41\23\3\1\341\26\3\1\236\3\3\1\41"+
    "\7\3\1\237\15\3\1\240\1\241\1\3\1\242\25\3"+
    "\1\41\17\3\1\243\36\3\1\41\4\3\1\245\15\3"+
    "\1\u0163\33\3\1\41\4\3\1\u0164\2\3\1\251\1\u0165"+
    "\3\3\1\254\2\3\1\251\7\3\1\251\26\3\1\41"+
    "\20\3\1\u0166\35\3\1\41\11\3\1\262\6\3\1\263"+
    "\1\u0167\34\3\1\41\4\3\1\u0168\3\3\1\271\45\3"+
    "\1\41\10\3\1\301\11\3\1\303\5\3\1\306\25\3"+
    "\1\41\4\3\1\307\1\310\1\3\1\311\1\3\1\312"+
    "\1\3\1\313\11\3\1\315\30\3\1\41\17\3\1\251"+
    "\36\3\1\41\14\3\1\317\41\3\1\41\7\3\1\u0169"+
    "\46\3\1\41\27\3\1\u016a\26\3\1\41\14\3\1\u016b"+
    "\41\3\1\41\7\3\1\u016c\46\3\1\41\22\3\1\u016d"+
    "\33\3\1\41\27\3\1\u016e\26\3\1\41\23\3\1\u016f"+
    "\32\3\1\41\27\3\1\u0170\26\3\1\41\7\3\1\u0170"+
    "\7\3\1\u0171\36\3\1\41\27\3\1\u0172\22\3\1\163"+
    "\3\3\1\41\56\3\1\41\17\3\1\61\7\3\1\u0173"+
    "\26\3\1\41\21\3\1\61\34\3\1\41\4\3\1\u0174"+
    "\24\3\1\251\20\3\1\171\3\3\1\41\5\3\1\u0175"+
    "\50\3\1\41\10\3\1\u0176\1\3\1\u0177\43\3\1\41"+
    "\22\3\1\u0178\2\3\1\u0179\24\3\1\u017a\3\3\1\41"+
    "\56\3\1\41\4\3\1\u017b\51\3\1\41\25\3\1\u017c"+
    "\30\3\1\41\12\3\1\u017d\43\3\1\41\23\3\1\u017e"+
    "\2\3\1\61\27\3\1\41\7\3\1\61\46\3\1\41"+
    "\5\3\1\u017f\50\3\1\41\12\3\1\u0180\43\3\1\41"+
    "\14\3\1\u0181\10\3\1\u0182\30\3\1\41\27\3\1\u0183"+
    "\26\3\1\41\31\3\1\260\24\3\1\41\15\3\1\u0184"+
    "\40\3\1\41\27\3\1\u0185\26\3\1\41\25\3\1\u0186"+
    "\30\3\1\41\6\3\1\u0187\47\3\1\41\10\3\1\251"+
    "\45\3\1\41\20\3\1\u0188\35\3\1\41\6\3\1\u0189"+
    "\10\3\1\u018a\36\3\1\41\4\3\1\u018b\51\3\1\41"+
    "\30\3\1\u018c\25\3\1\41\4\3\1\253\51\3\1\41"+
    "\25\3\1\u018d\30\3\1\41\5\3\1\61\12\3\1\u018e"+
    "\2\3\1\61\32\3\1\41\5\3\1\u018f\50\3\1\41"+
    "\22\3\1\u0190\27\3\1\u0191\3\3\1\41\56\3\1\41"+
    "\22\3\1\u0192\27\3\1\u0191\3\3\1\41\10\3\1\u0193"+
    "\45\3\1\41\20\3\1\u0170\31\3\1\u0191\3\3\1\41"+
    "\4\3\1\u0194\51\3\1\41\25\3\1\61\30\3\1\41"+
    "\7\3\1\u0195\46\3\1\41\2\3\1\u0196\53\3\1\41"+
    "\25\3\1\u0191\30\3\1\41\10\3\1\u0197\45\3\1\41"+
    "\22\3\1\u0198\33\3\1\41\14\3\1\u0199\41\3\1\41"+
    "\25\3\1\u019a\30\3\1\41\12\3\1\u019b\6\3\1\u019c"+
    "\34\3\1\41\22\3\1\u019d\26\3\1\u019e\4\3\1\41"+
    "\56\3\1\41\17\3\1\u019f\36\3\1\41\14\3\1\u01a0"+
    "\41\3\1\41\21\3\1\u01a1\34\3\1\41\14\3\1\u01a2"+
    "\41\3\1\41\13\3\1\u01a3\6\3\1\u01a4\33\3\1\41"+
    "\10\3\1\u01a5\45\3\1\41\22\3\1\u01a6\33\3\1\41"+
    "\22\3\1\u01a7\33\3\1\41\21\3\1\u01a8\34\3\1\41"+
    "\6\3\1\u01a9\47\3\1\41\34\3\1\u01aa\21\3\1\41"+
    "\7\3\1\u01ab\46\3\1\41\27\3\1\u01ac\26\3\1\41"+
    "\13\3\1\u01ad\42\3\1\41\17\3\1\u01ae\36\3\1\41"+
    "\27\3\1\u01af\26\3\1\41\25\3\1\u01b0\30\3\1\41"+
    "\6\3\1\u01b1\47\3\1\41\26\3\1\u01b2\13\3\1\u0191"+
    "\13\3\1\41\22\3\1\u01b3\3\3\1\u01b4\27\3\1\41"+
    "\27\3\1\u01b5\26\3\1\41\4\3\1\u01b6\3\3\1\u01b7"+
    "\45\3\1\41\4\3\1\u01b8\3\3\1\u01b9\45\3\1\41"+
    "\6\3\1\u01ba\47\3\1\41\4\3\1\u01bb\51\3\1\41"+
    "\17\3\1\u01bc\36\3\1\41\4\3\1\u01bd\51\3\1\41"+
    "\21\3\1\u01be\34\3\1\41\14\3\1\214\41\3\1\41"+
    "\10\3\1\u01bf\45\3\1\41\27\3\1\u01c0\26\3\1\41"+
    "\14\3\1\u01c1\41\3\1\41\26\3\1\u01c2\27\3\1\41"+
    "\17\3\1\u01c3\36\3\1\41\10\3\1\u0154\45\3\1\41"+
    "\17\3\1\u01c4\36\3\1\41\27\3\1\341\26\3\1\41"+
    "\20\3\1\u01c5\35\3\1\41\20\3\1\u01c6\35\3\1\41"+
    "\20\3\1\u015d\35\3\1\41\10\3\1\u01c7\45\3\1\41"+
    "\12\3\1\u01c8\43\3\1\41\7\3\1\u01c9\46\3\1\41"+
    "\12\3\1\u01ca\43\3\1\41\22\3\1\u01cb\33\3\1\41"+
    "\7\3\1\u01cc\46\3\1\41\13\3\1\u011d\42\3\1\41"+
    "\11\3\1\u01cd\44\3\1\41\4\3\1\u01ce\51\3\1\41"+
    "\17\3\1\u01aa\36\3\1\41\4\3\1\u01cf\51\3\1\41"+
    "\12\3\1\375\27\3\1\u01d0\13\3\1\41\56\3\1\41"+
    "\22\3\1\325\33\3\1\41\10\3\1\u01d1\45\3\1\41"+
    "\30\3\1\u01d2\25\3\1\41\21\3\1\u01d3\34\3\1\41"+
    "\32\3\1\u01d4\23\3\1\41\7\3\1\u01d5\46\3\1\41"+
    "\10\3\1\u01d6\45\3\1\41\12\3\1\u01d7\43\3\1\41"+
    "\10\3\1\u01d8\45\3\1\41\16\3\1\u01aa\37\3\1\41"+
    "\27\3\1\u01d9\26\3\1\41\23\3\1\u01d5\32\3\1\41"+
    "\24\3\1\u01da\31\3\1\41\17\3\1\u01db\36\3\1\41"+
    "\14\3\1\u01dc\41\3\1\41\30\3\1\341\25\3\1\41"+
    "\4\3\1\u01dd\6\3\1\u01de\42\3\1\41\27\3\1\u01df"+
    "\26\3\1\41\27\3\1\u01e0\26\3\1\41\10\3\1\u01e1"+
    "\45\3\1\41\10\3\1\u01e2\45\3\1\41\25\3\1\u01e3"+
    "\30\3\1\41\25\3\1\341\30\3\1\41\20\3\1\u01e4"+
    "\35\3\1\41\22\3\1\u01e5\2\3\1\u01e6\30\3\1\41"+
    "\20\3\1\u01e7\1\u01e8\34\3\1\41\22\3\1\u01e9\33\3"+
    "\1\41\10\3\1\u01ea\45\3\1\41\7\3\1\u01eb\46\3"+
    "\1\41\21\3\1\u01ec\34\3\1\41\4\3\1\u01ed\51\3"+
    "\1\41\25\3\1\u01ee\30\3\1\41\5\3\1\u01ef\50\3"+
    "\1\41\10\3\1\u01f0\45\3\1\41\14\3\1\u01f1\41\3"+
    "\1\41\4\3\1\u01f2\51\3\1\41\26\3\1\u01f3\27\3"+
    "\1\41\27\3\1\u01f4\26\3\1\41\6\3\1\u01f5\47\3"+
    "\1\41\27\3\1\u01f6\26\3\1\41\12\3\1\u01f7\43\3"+
    "\1\41\17\3\1\u01f8\36\3\1\41\14\3\1\u01f9\41\3"+
    "\1\41\7\3\1\u01fa\46\3\1\41\25\3\1\u01fb\23\3"+
    "\1\u01fc\4\3\1\41\56\3\1\41\30\3\1\u01fd\25\3"+
    "\1\41\10\3\1\u0155\45\3\1\41\10\3\1\u01fe\45\3"+
    "\1\41\22\3\1\u01ff\33\3\1\41\26\3\1\u01b4\27\3"+
    "\1\41\23\3\1\u0200\32\3\1\41\22\3\1\u0201\33\3"+
    "\1\41\25\3\1\u0202\30\3\1\41\10\3\1\u0203\45\3"+
    "\1\41\10\3\1\u0204\45\3\1\41\25\3\1\u0205\30\3"+
    "\1\41\6\3\1\u01af\42\3\1\u019e\4\3\1\41\17\3"+
    "\1\u0206\6\3\1\u0207\27\3\1\41\25\3\1\u0208\30\3"+
    "\1\41\23\3\1\u011d\32\3\1\41\14\3\1\u0209\41\3"+
    "\1\41\17\3\1\u020a\36\3\1\41\20\3\1\u020b\35\3"+
    "\1\41\20\3\1\u020c\35\3\1\41\12\3\1\u020d\43\3"+
    "\1\41\27\3\1\u0154\26\3\1\41\20\3\1\u020e\35\3"+
    "\1\41\17\3\1\u020f\36\3\1\41\6\3\1\u0210\12\3"+
    "\1\u0211\34\3\1\41\10\3\1\u0212\45\3\1\41\10\3"+
    "\1\u0213\45\3\1\41\31\3\1\u0214\24\3\1\41\14\3"+
    "\1\u0215\13\3\1\u0216\25\3\1\41\10\3\1\u01a2\45\3"+
    "\1\41\32\3\1\u0217\23\3\1\41\21\3\1\u019c\34\3"+
    "\1\41\16\3\1\u0154\37\3\1\41\27\3\1\u0218\26\3"+
    "\1\41\17\3\1\u0171\36\3\1\41\27\3\1\u0219\26\3"+
    "\1\41\27\3\1\u0173\26\3\1\41\5\3\1\u0175\50\3"+
    "\1\41\23\3\1\u017e\32\3\1\41\14\3\1\u0181\41\3"+
    "\1\41\25\3\1\u021a\30\3\1\41\14\3\1\u021b\41\3"+
    "\1\41\7\3\1\u021c\46\3\1\41\14\3\1\u021d\41\3"+
    "\1\41\6\3\1\u021e\47\3\1\41\27\3\1\u021f\26\3"+
    "\1\41\27\3\1\u0220\26\3\1\41\10\3\1\61\41\3"+
    "\1\u0191\3\3\1\41\12\3\1\u0221\43\3\1\41\4\3"+
    "\1\u0222\51\3\1\41\4\3\1\u0223\51\3\1\41\17\3"+
    "\1\u0224\36\3\1\41\10\3\1\u0225\45\3\1\41\17\3"+
    "\1\u0226\36\3\1\41\6\3\1\u0227\21\3\1\u0228\25\3"+
    "\1\41\27\3\1\u0229\26\3\1\41\20\3\1\u022a\35\3"+
    "\1\41\7\3\1\u0229\46\3\1\41\4\3\1\u022b\45\3"+
    "\1\u01d0\3\3\1\41\56\3\1\41\30\3\1\u022c\25\3"+
    "\1\41\10\3\1\u022d\45\3\1\41\10\3\1\u022e\45\3"+
    "\1\41\21\3\1\251\34\3\1\41\16\3\1\61\37\3"+
    "\1\41\4\3\1\u022f\51\3\1\41\10\3\1\u0230\45\3"+
    "\1\41\14\3\1\u021f\41\3\1\41\4\3\1\u0231\51\3"+
    "\1\41\27\3\1\u0232\26\3\1\41\23\3\1\61\32\3"+
    "\1\41\27\3\1\u0233\26\3\1\41\10\3\1\u0234\45\3"+
    "\1\41\17\3\1\u0235\36\3\1\41\25\3\1\u0236\30\3"+
    "\1\41\22\3\1\u0237\33\3\1\41\20\3\1\u0238\35\3"+
    "\1\41\17\3\1\u0239\36\3\1\41\7\3\1\u023a\46\3"+
    "\1\41\22\3\1\u023b\33\3\1\41\4\3\1\u023c\51\3"+
    "\1\41\6\3\1\u023d\47\3\1\41\10\3\1\u021d\45\3"+
    "\1\41\1\u023e\55\3\1\41\23\3\1\u023f\2\3\1\u0240"+
    "\27\3\1\41\21\3\1\u0241\34\3\1\41\22\3\1\u0242"+
    "\33\3\1\41\27\3\1\u015d\26\3\1\41\21\3\1\u01e2"+
    "\34\3\1\41\16\3\1\u01e2\37\3\1\41\32\3\1\u0243"+
    "\23\3\1\41\10\3\1\377\45\3\1\41\6\3\1\u0244"+
    "\47\3\1\41\6\3\1\u015d\47\3\1\41\22\3\1\u0110"+
    "\33\3\1\41\22\3\1\u0245\33\3\1\41\6\3\1\u0246"+
    "\2\3\1\u0247\11\3\1\u0248\32\3\1\41\11\3\1\u0249"+
    "\44\3\1\41\17\3\1\u024a\36\3\1\41\30\3\1\u024b"+
    "\25\3\1\41\16\3\1\341\37\3\1\41\16\3\1\u024c"+
    "\37\3\1\41\10\3\1\u024d\45\3\1\41\22\3\1\u024e"+
    "\33\3\1\41\10\3\1\u024f\45\3\1\41\23\3\1\u0250"+
    "\2\3\1\u0251\27\3\1\41\10\3\1\u0128\45\3\1\41"+
    "\26\3\1\u0252\27\3\1\41\16\3\1\u0253\37\3\1\41"+
    "\26\3\1\364\27\3\1\41\25\3\1\u0154\30\3\1\41"+
    "\23\3\1\u0254\32\3\1\41\25\3\1\u0255\16\3\1\u0256"+
    "\11\3\1\41\17\3\1\u0257\36\3\1\41\27\3\1\u0258"+
    "\26\3\1\41\30\3\1\u0259\25\3\1\41\25\3\1\u015d"+
    "\30\3\1\41\25\3\1\u025a\30\3\1\41\14\3\1\u025b"+
    "\41\3\1\41\22\3\1\u025c\33\3\1\41\5\3\1\u025d"+
    "\50\3\1\41\17\3\1\u025e\36\3\1\41\7\3\1\u025f"+
    "\46\3\1\41\34\3\1\u0260\21\3\1\41\25\3\1\u0261"+
    "\30\3\1\41\10\3\1\u0262\45\3\1\41\7\3\1\u0263"+
    "\46\3\1\41\22\3\1\u0264\17\3\1\u0265\13\3\1\41"+
    "\56\3\1\41\10\3\1\u0266\45\3\1\41\25\3\1\u0267"+
    "\30\3\1\41\17\3\1\u012d\36\3\1\41\10\3\1\u0268"+
    "\45\3\1\41\13\3\1\u0269\42\3\1\41\30\3\1\222"+
    "\25\3\1\41\10\3\1\u024e\40\3\1\u026a\4\3\1\41"+
    "\17\3\1\u026b\36\3\1\41\6\3\1\u0126\47\3\1\41"+
    "\20\3\1\u026c\35\3\1\41\33\3\1\u01ea\22\3\1\41"+
    "\27\3\1\u01c5\26\3\1\41\7\3\1\u026d\46\3\1\41"+
    "\22\3\1\u026e\26\3\1\u026f\4\3\1\41\56\3\1\41"+
    "\17\3\1\u0270\36\3\1\41\30\3\1\u0271\25\3\1\41"+
    "\21\3\1\u0272\34\3\1\41\14\3\1\u0273\41\3\1\41"+
    "\30\3\1\u0274\25\3\1\41\10\3\1\u0275\45\3\1\41"+
    "\4\3\1\u0276\35\3\1\u01ea\13\3\1\41\56\3\1\41"+
    "\22\3\1\u0277\33\3\1\41\13\3\1\u0154\42\3\1\41"+
    "\14\3\1\u0278\41\3\1\41\7\3\1\u0279\46\3\1\41"+
    "\6\3\1\u027a\47\3\1\41\5\3\1\u027b\50\3\1\41"+
    "\17\3\1\376\36\3\1\41\4\3\1\u027c\51\3\1\41"+
    "\4\3\1\u027d\51\3\1\41\7\3\1\u0112\46\3\1\41"+
    "\7\3\1\u027e\46\3\1\41\23\3\1\u01ea\32\3\1\41"+
    "\14\3\1\u027f\41\3\1\41\17\3\1\u0280\36\3\1\41"+
    "\4\3\1\u0281\51\3\1\41\10\3\1\u01b3\45\3\1\41"+
    "\6\3\1\u0282\47\3\1\41\20\3\1\u0283\1\3\1\u0284"+
    "\33\3\1\41\20\3\1\u025f\35\3\1\41\32\3\1\u0285"+
    "\23\3\1\41\30\3\1\u0286\25\3\1\41\10\3\1\u0287"+
    "\45\3\1\41\10\3\1\u0288\45\3\1\41\20\3\1\u0289"+
    "\35\3\1\41\22\3\1\u028a\33\3\1\41\22\3\1\u0154"+
    "\33\3\1\41\22\3\1\u028b\33\3\1\41\10\3\1\u028c"+
    "\45\3\1\41\14\3\1\u028d\41\3\1\41\25\3\1\u028e"+
    "\30\3\1\41\27\3\1\u028f\26\3\1\41\10\3\1\u0191"+
    "\45\3\1\41\17\3\1\u0290\36\3\1\41\6\3\1\u01df"+
    "\47\3\1\41\6\3\1\u01d2\47\3\1\41\26\3\1\u0279"+
    "\27\3\1\41\6\3\1\u0291\47\3\1\41\4\3\1\u0292"+
    "\51\3\1\41\10\3\1\u0269\45\3\1\41\27\3\1\u0293"+
    "\26\3\1\41\16\3\1\u0294\37\3\1\41\10\3\1\u0295"+
    "\45\3\1\41\14\3\1\u0155\41\3\1\41\4\3\1\u0296"+
    "\51\3\1\41\10\3\1\u0297\45\3\1\41\10\3\1\u0298"+
    "\45\3\1\41\10\3\1\364\45\3\1\41\16\3\1\u0110"+
    "\37\3\1\41\26\3\1\u0299\22\3\1\u029a\4\3\1\41"+
    "\56\3\1\41\4\3\1\u029b\51\3\1\41\12\3\1\u019b"+
    "\43\3\1\41\10\3\1\u011d\45\3\1\41\23\3\1\u029c"+
    "\32\3\1\41\13\3\1\u0279\42\3\1\41\4\3\1\u029d"+
    "\51\3\1\41\10\3\1\u029e\45\3\1\41\6\3\1\u029f"+
    "\47\3\1\41\10\3\1\260\45\3\1\41\22\3\1\u017d"+
    "\33\3\1\41\16\3\1\u02a0\37\3\1\41\22\3\1\u02a1"+
    "\33\3\1\41\14\3\1\u02a2\41\3\1\41\25\3\1\u02a3"+
    "\24\3\1\171\3\3\1\41\17\3\1\u02a4\36\3\1\41"+
    "\14\3\1\u02a5\41\3\1\41\22\3\1\u02a6\33\3\1\41"+
    "\7\3\1\u02a7\46\3\1\41\7\3\1\u02a8\46\3\1\41"+
    "\4\3\1\u02a9\51\3\1\41\25\3\1\277\30\3\1\41"+
    "\10\3\1\u02aa\41\3\1\u0265\3\3\1\41\56\3\1\41"+
    "\20\3\1\u02ab\35\3\1\41\27\3\1\u022a\26\3\1\41"+
    "\17\3\1\u02ac\36\3\1\41\21\3\1\u02ad\30\3\1\u01ea"+
    "\3\3\1\41\56\3\1\41\6\3\1\u02ae\47\3\1\41"+
    "\20\3\1\u02a7\35\3\1\41\30\3\1\u02af\25\3\1\41"+
    "\14\3\1\u02b0\41\3\1\41\6\3\1\u022c\47\3\1\41"+
    "\17\3\1\61\36\3\1\41\6\3\1\u02b1\47\3\1\41"+
    "\21\3\1\u02b2\34\3\1\41\4\3\1\u02b3\51\3\1\41"+
    "\10\3\1\311\45\3\1\41\34\3\1\311\21\3\1\41"+
    "\27\3\1\311\26\3\1\41\7\3\1\311\46\3\1\41"+
    "\16\3\1\u017d\36\3\1\u01aa\1\41\56\3\1\41\27\3"+
    "\1\u02b4\26\3\1\41\26\3\1\u02b5\27\3\1\41\34\3"+
    "\1\u02b6\21\3\1\41\21\3\1\u02b7\34\3\1\41\27\3"+
    "\1\u02b8\26\3\1\41\17\3\1\u02b9\36\3\1\41\25\3"+
    "\1\u01ea\30\3\1\41\22\3\1\u02ba\33\3\1\41\22\3"+
    "\1\u02bb\33\3\1\41\17\3\1\u02bc\36\3\1\41\22\3"+
    "\1\u02bd\33\3\1\41\22\3\1\u024d\33\3\1\41\21\3"+
    "\1\u02be\34\3\1\41\24\3\1\u02bf\31\3\1\41\25\3"+
    "\1\u01e2\30\3\1\41\21\3\1\u0154\22\3\1\u02c0\11\3"+
    "\1\41\56\3\1\41\4\3\1\u02c1\51\3\1\41\23\3"+
    "\1\u02c2\32\3\1\41\10\3\1\u02c3\45\3\1\41\5\3"+
    "\1\u02c4\50\3\1\41\4\3\1\u02c5\51\3\1\41\22\3"+
    "\1\u02c6\33\3\1\41\26\3\1\u02c7\27\3\1\41\14\3"+
    "\1\u02c8\41\3\1\41\14\3\1\u02c9\41\3\1\41\17\3"+
    "\1\u02ca\36\3\1\41\14\3\1\u02cb\41\3\1\41\17\3"+
    "\1\u02cc\36\3\1\41\12\3\1\u02cd\43\3\1\41\17\3"+
    "\1\u02ce\36\3\1\41\22\3\1\u02cf\17\3\1\u02d0\13\3"+
    "\1\41\56\3\1\41\23\3\1\u02d1\32\3\1\41\10\3"+
    "\1\u028f\45\3\1\41\26\3\1\u02d2\27\3\1\41\32\3"+
    "\1\u01ea\23\3\1\41\5\3\1\u02d3\20\3\1\u019f\27\3"+
    "\1\41\4\3\1\u02d4\51\3\1\41\25\3\1\u02d5\30\3"+
    "\1\41\27\3\1\u02d6\26\3\1\41\4\3\1\u02d7\51\3"+
    "\1\41\10\3\1\u025f\45\3\1\41\10\3\1\u02d8\45\3"+
    "\1\41\25\3\1\u02d9\14\3\1\u02b7\6\3\1\u02da\4\3"+
    "\1\41\56\3\1\41\4\3\1\u02db\51\3\1\41\7\3"+
    "\1\u02dc\46\3\1\41\21\3\1\101\34\3\1\41\10\3"+
    "\1\u0294\45\3\1\41\21\3\1\u02dd\27\3\1\u02da\4\3"+
    "\1\41\12\3\1\u02de\43\3\1\41\7\3\1\u02b7\46\3"+
    "\1\41\6\3\1\u02df\42\3\1\u02da\4\3\1\41\56\3"+
    "\1\41\13\3\1\u02e0\42\3\1\41\10\3\1\u02be\45\3"+
    "\1\41\20\3\1\u02e1\35\3\1\41\12\3\1\u02e2\43\3"+
    "\1\41\30\3\1\u02e3\25\3\1\41\23\3\1\u02e4\32\3"+
    "\1\41\14\3\1\u02e5\41\3\1\41\23\3\1\u01e2\32\3"+
    "\1\41\27\3\1\u025f\26\3\1\41\30\3\1\u02e6\25\3"+
    "\1\41\21\3\1\u01c5\34\3\1\41\22\3\1\u02e7\33\3"+
    "\1\41\25\3\1\u0291\30\3\1\41\13\3\1\u02e8\42\3"+
    "\1\41\25\3\1\u02d6\30\3\1\41\4\3\1\u01ea\51\3"+
    "\1\41\4\3\1\u02e9\51\3\1\41\21\3\1\u02ea\34\3"+
    "\1\41\26\3\1\u02eb\27\3\1\41\25\3\1\u02ce\30\3"+
    "\1\41\26\3\1\u02ec\27\3\1\41\26\3\1\u01ea\27\3"+
    "\1\41\17\3\1\u02ed\36\3\1\41\10\3\1\u0110\45\3"+
    "\1\41\21\3\1\u02ee\27\3\1\u02ef\4\3\1\41\56\3"+
    "\1\41\10\3\1\341\35\3\1\u02f0\7\3\1\41\56\3"+
    "\1\41\25\3\1\u02f1\30\3\1\41\27\3\1\u02f2\14\3"+
    "\1\u02f3\11\3\1\41\56\3\1\41\17\3\1\u02f4\36\3"+
    "\1\41\14\3\1\u02f5\41\3\1\41\22\3\1\u02f6\33\3"+
    "\1\41\17\3\1\u02a4\36\3\1\41\26\3\1\u02f7\27\3"+
    "\1\41\17\3\1\u021c\36\3\1\41\24\3\1\u02f8\31\3"+
    "\1\41\21\3\1\u022a\34\3\1\41\22\3\1\u02f9\33\3"+
    "\1\41\22\3\1\u02fa\33\3\1\41\14\3\1\u02fb\41\3"+
    "\1\41\17\3\1\u02fc\36\3\1\41\12\3\1\u02fd\37\3"+
    "\1\u02d0\3\3\1\41\56\3\1\41\26\3\1\u02fe\27\3"+
    "\1\41\23\3\1\u02ff\32\3\1\41\25\3\1\260\30\3"+
    "\1\41\10\3\1\u02a7\41\3\1\u02b7\3\3\1\41\56\3"+
    "\1\41\7\3\1\u02ac\46\3\1\41\27\3\1\u02a7\26\3"+
    "\1\41\25\3\1\u02b1\30\3\1\41\22\3\1\u0300\33\3"+
    "\1\41\10\3\1\u017d\45\3\1\41\12\3\1\61\43\3"+
    "\1\41\25\3\1\u0301\16\3\1\u0302\11\3\1\41\56\3"+
    "\1\41\16\3\1\u0303\37\3\1\41\20\3\1\341\35\3"+
    "\1\41\25\3\1\u0304\30\3\1\41\10\3\1\u0305\45\3"+
    "\1\41\20\3\1\u0306\35\3\1\41\6\3\1\u0307\47\3"+
    "\1\41\4\3\1\u0308\51\3\1\41\21\3\1\377\34\3"+
    "\1\41\7\3\1\341\46\3\1\41\30\3\1\u0309\25\3"+
    "\1\41\6\3\1\u030a\47\3\1\41\7\3\1\u030b\46\3"+
    "\1\41\4\3\1\u030c\51\3\1\41\27\3\1\u01e2\26\3"+
    "\1\41\22\3\1\u030d\33\3\1\41\21\3\1\u0191\34\3"+
    "\1\41\17\3\1\u030e\36\3\1\41\13\3\1\u030f\42\3"+
    "\1\41\26\3\1\u01d2\27\3\1\41\20\3\1\u0310\35\3"+
    "\1\41\27\3\1\u0311\26\3\1\41\23\3\1\u0312\32\3"+
    "\1\41\26\3\1\u02cd\13\3\1\u0313\13\3\1\41\56\3"+
    "\1\41\10\3\1\u0314\45\3\1\41\4\3\1\u0315\51\3"+
    "\1\41\10\3\1\u02b7\45\3\1\41\10\3\1\u0316\45\3"+
    "\1\41\22\3\1\u0317\33\3\1\41\27\3\1\u01a3\26\3"+
    "\1\41\26\3\1\u0191\22\3\1\u0318\4\3\1\41\56\3"+
    "\1\41\21\3\1\u0319\34\3\1\41\33\3\1\341\22\3"+
    "\1\41\7\3\1\u028f\46\3\1\41\12\3\1\u0126\27\3"+
    "\1\u02b7\13\3\1\41\56\3\1\41\12\3\1\u031a\43\3"+
    "\1\41\25\3\1\u031b\30\3\1\41\22\3\1\u031c\33\3"+
    "\1\41\14\3\1\u031d\41\3\1\41\10\3\1\u031e\45\3"+
    "\1\41\10\3\1\u031f\45\3\1\41\17\3\1\u0320\36\3"+
    "\1\41\23\3\1\u0321\32\3\1\41\7\3\1\u0322\46\3"+
    "\1\41\20\3\1\u011d\35\3\1\41\25\3\1\u0323\30\3"+
    "\1\41\22\3\1\u0324\33\3\1\41\7\3\1\u0311\46\3"+
    "\1\41\17\3\1\u0325\36\3\1\41\13\3\1\u01ea\42\3"+
    "\1\41\10\3\1\u0326\45\3\1\41\14\3\1\u0327\41\3"+
    "\1\41\12\3\1\u0311\43\3\1\41\26\3\1\u0328\27\3"+
    "\1\41\34\3\1\u02cd\14\3\1\u0329\4\3\1\41\56\3"+
    "\1\41\6\3\1\u032a\47\3\1\41\4\3\1\u032b\51\3"+
    "\1\41\17\3\1\u032c\36\3\1\41\25\3\1\u032d\30\3"+
    "\1\41\26\3\1\260\27\3\1\41\30\3\1\u032e\25\3"+
    "\1\41\21\3\1\311\34\3\1\41\30\3\1\u032f\25\3"+
    "\1\41\26\3\1\u022c\27\3\1\41\26\3\1\u02fd\23\3"+
    "\1\u0313\3\3\1\41\56\3\1\41\10\3\1\u0330\45\3"+
    "\1\41\27\3\1\u0331\26\3\1\41\21\3\1\260\34\3"+
    "\1\41\34\3\1\u02fd\21\3\1\41\6\3\1\u0332\47\3"+
    "\1\41\10\3\1\u0333\45\3\1\41\4\3\1\u0334\35\3"+
    "\1\u017a\13\3\1\41\56\3\1\41\23\3\1\u0335\32\3"+
    "\1\41\30\3\1\u0336\25\3\1\41\34\3\1\u0337\21\3"+
    "\1\41\22\3\1\u0338\33\3\1\41\22\3\1\u0339\33\3"+
    "\1\41\7\3\1\u02ed\46\3\1\41\6\3\1\u02ed\47\3"+
    "\1\41\33\3\1\u0154\22\3\1\41\26\3\1\u0337\27\3"+
    "\1\41\4\3\1\u033a\51\3\1\41\10\3\1\u033b\40\3"+
    "\1\u033c\4\3\1\41\56\3\1\41\27\3\1\u033d\26\3"+
    "\1\41\7\3\1\u011d\46\3\1\41\7\3\1\u033e\46\3"+
    "\1\41\27\3\1\u02dc\26\3\1\41\25\3\1\345\30\3"+
    "\1\41\12\3\1\u033e\43\3\1\41\27\3\1\u0109\26\3"+
    "\1\41\22\3\1\u033f\33\3\1\41\17\3\1\341\36\3"+
    "\1\41\31\3\1\u012d\24\3\1\41\26\3\1\341\27\3"+
    "\1\41\14\3\1\u0340\41\3\1\41\10\3\1\u015d\45\3"+
    "\1\41\10\3\1\u032d\45\3\1\41\4\3\1\u0341\51\3"+
    "\1\41\7\3\1\u0154\46\3\1\41\17\3\1\u0342\36\3"+
    "\1\41\34\3\1\u011d\21\3\1\41\7\3\1\u0343\46\3"+
    "\1\41\21\3\1\u0344\34\3\1\41\6\3\1\u0345\47\3"+
    "\1\41\22\3\1\u0346\33\3\1\41\27\3\1\u020f\26\3"+
    "\1\41\4\3\1\u0347\51\3\1\41\27\3\1\u01ea\26\3"+
    "\1\41\22\3\1\u0348\33\3\1\41\23\3\1\311\32\3"+
    "\1\41\27\3\1\u02ac\26\3\1\41\14\3\1\u0349\41\3"+
    "\1\41\13\3\1\u034a\42\3\1\41\34\3\1\364\21\3"+
    "\1\41\21\3\1\u034b\34\3\1\41\17\3\1\u034c\36\3"+
    "\1\41\26\3\1\u02b7\22\3\1\u034d\4\3\1\41\56\3"+
    "\1\41\27\3\1\u034e\26\3\1\41\21\3\1\u034f\34\3"+
    "\1\41\25\3\1\u020f\16\3\1\u0350\11\3\1\41\56\3"+
    "\1\41\14\3\1\u0351\34\3\1\u0352\4\3\1\41\56\3"+
    "\1\41\30\3\1\u0353\25\3\1\41\21\3\1\u01e8\34\3"+
    "\1\41\27\3\1\u02d1\26\3\1\41\7\3\1\u0354\41\3"+
    "\1\u0355\4\3\1\41\56\3\1\41\12\3\1\u01e2\43\3"+
    "\1\41\25\3\1\u0356\30\3\1\41\17\3\1\u01a3\36\3"+
    "\1\41\5\3\1\u0357\50\3\1\41\27\3\1\277\26\3"+
    "\1\41\22\3\1\u0181\33\3\1\41\4\3\1\u0358\51\3"+
    "\1\41\26\3\1\u0359\27\3\1\41\10\3\1\u0341\45\3"+
    "\1\41\10\3\1\161\45\3\1\41\27\3\1\u035a\26\3"+
    "\1\41\17\3\1\u035b\36\3\1\41\22\3\1\u035c\33\3"+
    "\1\41\23\3\1\u035d\32\3\1\41\10\3\1\u035e\45\3"+
    "\1\41\14\3\1\u035f\41\3\1\41\17\3\1\u0360\36\3"+
    "\1\41\25\3\1\u0361\30\3\1\41\23\3\1\u0362\32\3"+
    "\1\41\25\3\1\u0363\30\3\1\41\22\3\1\u0364\33\3"+
    "\1\41\21\3\1\u01ea\27\3\1\u0365\4\3\1\41\56\3"+
    "\1\41\25\3\1\u02b7\30\3\1\41\23\3\1\u0366\32\3"+
    "\1\41\10\3\1\u0367\45\3\1\41\26\3\1\u0368\27\3"+
    "\1\41\4\3\1\u0369\51\3\1\41\22\3\1\u036a\33\3"+
    "\1\41\6\3\1\u036b\47\3\1\41\27\3\1\u01aa\26\3"+
    "\1\41\3\3\1\u036c\52\3\1\41\10\3\1\u036d\45\3"+
    "\1\41\25\3\1\u036e\30\3\1\41\17\3\1\u01ea\36\3"+
    "\1\41\4\3\1\214\51\3\1\41\4\3\1\u036f\51\3"+
    "\1\41\27\3\1\u02b7\26\3\1\41\10\3\1\u0370\45\3"+
    "\1\41\11\3\1\u0371\44\3\1\41\21\3\1\u0372\34\3"+
    "\1\41\27\3\1\u0373\26\3\1\41\6\3\1\u0374\47\3"+
    "\1\41\10\3\1\u0245\45\3\1\41\34\3\1\u01e2\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39715];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\0\35\1\122\0\1\1\5\0\1\1"+
    "\44\0\1\1\102\0\1\1\22\0\1\1\30\0\1\1"+
    "\17\0\1\1\1\0\1\1\64\0\1\1\10\0\1\1"+
    "\34\0\1\1\26\0\1\1\14\0\1\1\6\0\1\1"+
    "\4\0\1\1\14\0\1\1\21\0\1\1\6\0\1\1"+
    "\6\0\1\1\5\0\1\1\4\0\1\1\7\0\1\1"+
    "\21\0\1\1\7\0\1\1\15\0\1\1\117\0\1\1"+
    "\2\0\2\1\3\0\1\1\4\0\1\1\45\0\1\1"+
    "\4\0\1\1\34\0\1\1\30\0\1\1\11\0\1\1"+
    "\24\0\1\1\2\0\1\1\40\0\1\1\4\0\1\1"+
    "\20\0\1\1\22\0\1\1\20\0\1\1\4\0\1\1"+
    "\2\0\1\1\17\0\1\1\17\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[884];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int)start, size, color); 
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 39: break;
          case 2:
            { return textColor(yychar, yylength(), new Color(153,50, 204));
            }
            // fall through
          case 40: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(0,0,0));
            }
            // fall through
          case 41: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(255, 165, 0));
            }
            // fall through
          case 42: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(32, 178, 170));
            }
            // fall through
          case 43: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(218, 112, 214));
            }
            // fall through
          case 44: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(255, 215, 0));
            }
            // fall through
          case 45: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(0, 191, 255));
            }
            // fall through
          case 46: break;
          case 9:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return textColor(yychar, yylength(), new Color(0, 191, 255));
            }
            // fall through
          case 47: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(166, 7, 7));
            }
            // fall through
          case 48: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(120, 199, 20));
            }
            // fall through
          case 49: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(238, 234, 12));
            }
            // fall through
          case 50: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(0, 255, 127));
            }
            // fall through
          case 51: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(70, 130, 180));
            }
            // fall through
          case 52: break;
          case 15:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 53: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(255,140,0));
            }
            // fall through
          case 54: break;
          case 17:
            { return textColor(yychar, yylength(), new Color(62, 246, 166));
            }
            // fall through
          case 55: break;
          case 18:
            { return textColor(yychar, yylength(), new Color(124, 252, 0));
            }
            // fall through
          case 56: break;
          case 19:
            { return textColor(yychar, yylength(), new Color(159, 0, 12));
            }
            // fall through
          case 57: break;
          case 20:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return textColor(yychar, yylength(), new Color(218, 112, 214));
            }
            // fall through
          case 58: break;
          case 21:
            { return textColor(yychar, yylength(), new Color(191, 199, 20));
            }
            // fall through
          case 59: break;
          case 22:
            { return textColor(yychar, yylength(), new Color(15, 255, 0));
            }
            // fall through
          case 60: break;
          case 23:
            { return textColor(yychar, yylength(), new Color(255, 0, 0));
            }
            // fall through
          case 61: break;
          case 24:
            { return textColor(yychar, yylength(), new Color(231, 159, 33));
            }
            // fall through
          case 62: break;
          case 25:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return textColor(yychar, yylength(), new Color(218, 112, 214));
            }
            // fall through
          case 63: break;
          case 26:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 64: break;
          case 27:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 4);
            { return textColor(yychar, yylength(), new Color(255, 165, 0));
            }
            // fall through
          case 65: break;
          case 28:
            { return textColor(yychar, yylength(), new Color(255, 64, 216));
            }
            // fall through
          case 66: break;
          case 29:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 67: break;
          case 30:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 5);
            { return textColor(yychar, yylength(), new Color(255, 165, 0));
            }
            // fall through
          case 68: break;
          case 31:
            { return textColor(yychar, yylength(), new Color(91, 145, 14));
            }
            // fall through
          case 69: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 70: break;
          case 33:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { return textColor(yychar, yylength(), new Color(218, 112, 214));
            }
            // fall through
          case 71: break;
          case 34:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 7);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 72: break;
          case 35:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 73: break;
          case 36:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return textColor(yychar, yylength(), new Color(218, 112, 214));
            }
            // fall through
          case 74: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { return textColor(yychar, yylength(), new Color(255, 165, 0));
            }
            // fall through
          case 75: break;
          case 38:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 10);
            { return textColor(yychar, yylength(), new Color(64, 224, 208));
            }
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
